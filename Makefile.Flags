## @file
#  SPDM library.
#
#  Copyright (c) 2020, Intel Corporation. All rights reserved.<BR>
#
#  SPDX-License-Identifier: BSD-2-Clause-Patent
#
##

#
# Build Configuration Macro Definition
#
ARCH = X64
TARGET = DEBUG
CRYPTO = MbedTls
TOOLCHAIN = VS2019

!IF "$(ARCH)" == "X64"
!MESSAGE ARCH=X64
!ELSEIF "$(ARCH)" == "Ia32"
!MESSAGE ARCH=Ia32
!ELSE
!ERROR Unknown ARCH!
!ENDIF

!IF "$(TARGET)" == "DEBUG"
!MESSAGE TARGET=DEBUG
!ELSEIF "$(TARGET)" == "RELEASE"
!MESSAGE TARGET=RELEASE
!ELSE
!ERROR Unknown TARGET!
!ENDIF

!IF "$(CRYPTO)" == "MbedTls"
!MESSAGE CRYPTO=MbedTls
!ELSEIF "$(CRYPTO)" == "Openssl"
!MESSAGE CRYPTO=Openssl
!ELSE
!ERROR Unknown CRYPTO!
!ENDIF

!IF "$(TOOLCHAIN)" == "VS2015"
!MESSAGE TOOLCHAIN=VS2015
!ELSEIF "$(TOOLCHAIN)" == "VS2019"
!MESSAGE TOOLCHAIN=VS2019
!ELSEIF "$(TOOLCHAIN)" == "CLANG"
!MESSAGE TOOLCHAIN=CLANG
!ELSEIF "$(TOOLCHAIN)" == "LIBFUZZER"
!MESSAGE TOOLCHAIN=LIBFUZZER
!ELSEIF "$(TOOLCHAIN)" == "CBMC"
!MESSAGE TOOLCHAIN=CBMC
!ELSE
!ERROR Unknown TOOLCHAIN!
!ENDIF

#
# Shell Command Macro
#
#CP = copy /y
CP = xcopy /y /s
MV = move /y
RM = del /f /q
MD = mkdir
RD = rmdir /s /q

#
# Tools definitions specific to this module
#

!IF "$(TOOLCHAIN)" == "VS2015"
VS_BIN_HOST = %VCINSTALLDIR%bin
VS_BIN_IA32 = %VCINSTALLDIR%bin
VS_BIN_X64  = %VCINSTALLDIR%bin\x86_amd64
!ELSEIF "$(TOOLCHAIN)" == "VS2019"
VS_BIN_HOST = %VCToolsInstallDir%bin\Hostx64\x64
VS_BIN_IA32 = %VCToolsInstallDir%bin\Hostx86\x86
VS_BIN_X64  = %VCToolsInstallDir%bin\Hostx64\x64
!ENDIF

MAKE = nmake.exe
MAKEFILE = Makefile

#
# CBMC test tool
#
!IF "$(TOOLCHAIN)" == "CBMC"
CC = goto-cl.exe

CC_OBJ_FLAG = /Fo
MBEDTLS_FLAGS = /wd4244 /wd4132 /wd4245 /wd4310 /wd4701 /wd4127
OPENSSL_FLAGS = /FIBase.h /wd4090 /wd4132 /wd4244 /wd4245 /wd4267 /wd4306 /wd4310 /wd4700 /wd4389 /wd4702 /wd4706 /wd4819
CMOCKA_FLAGS = /wd4204 /wd4133 /wd4267 /wd4701 /wd4702 /wd4703 /D _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1 /D _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT=1 /D _CRT_NONSTDC_NO_WARNINGS=1

CC_FLAGS = /nologo /c /WX /W4 /Gs32768 /D UNICODE /Gy /EHs-c- /GR- /GF /Z7 /Oy- /D_CRT_SECURE_NO_WARNINGS /DCBMC_CC
!IF "$(TARGET)" == "DEBUG"
CC_FLAGS = $(CC_FLAGS) /Od
!ELSEIF "$(TARGET)" == "RELEASE"
CC_FLAGS = $(CC_FLAGS) /GL /O1b2s
!ENDIF

SLINK = echo

SLINK_OBJ_FLAG = >
SLINK_FLAGS = 

DLINK = goto-cl.exe
DLINK_OBJECT_FILES = $(STATIC_LIBRARY_OBJECT_FILES)

DLINK_FLAGS = 

#
# CLANG
#
!ELSEIF "$(TOOLCHAIN)" == "CLANG"
CC = clang.exe

CC_OBJ_FLAG = -o
MBEDTLS_FLAGS = 
OPENSSL_FLAGS = -include Base.h -Wno-error=format -Wno-format
CMOCKA_FLAGS = -std=gnu99 -Wpedantic -Wall -Wshadow -Wmissing-prototypes -Wcast-align -Werror=address -Wstrict-prototypes -Werror=strict-prototypes -Wwrite-strings -Werror=write-strings -Werror-implicit-function-declaration -Wpointer-arith -Werror=pointer-arith -Wdeclaration-after-statement -Werror=declaration-after-statement -Wreturn-type -Werror=return-type -Wuninitialized -Werror=uninitialized -Werror=strict-overflow -Wstrict-overflow=2 -Wno-format-zero-length -Wmissing-field-initializers -Wformat-security -Werror=format-security -fno-common -Wformat -fno-common -fstack-protector-strong

CC_FLAGS = -c -g -fshort-wchar -fno-strict-aliasing -Wall  -Wno-array-bounds -ffunction-sections -fdata-sections -fno-common  -mno-red-zone -Wno-address -fno-asynchronous-unwind-tables -flto -DUSING_LTO -Wno-switch -funwind-tables -D_CRT_SECURE_NO_WARNINGS
!IF "$(TARGET)" == "DEBUG"
CC_FLAGS = $(CC_FLAGS) -O0 -gcodeview
!ELSEIF "$(TARGET)" == "RELEASE"
CC_FLAGS = $(CC_FLAGS) -Oz
!ENDIF

!IF "$(ARCH)" == "X64"
CC_FLAGS = $(CC_FLAGS) -m64 -mcmodel=small
!ELSEIF "$(ARCH)" == "Ia32"
CC_FLAGS = $(CC_FLAGS) -m32 -march=i586
!ENDIF

SLINK = llvm-lib.exe

SLINK_OBJ_FLAG = /OUT:
SLINK_FLAGS = 

DLINK = lld-link.exe
DLINK_OBJECT_FILES = $(STATIC_LIBRARY_FILES)

DLINK_FLAGS = /out:"$(BIN_DIR)\$(BASE_NAME).exe" /base:0x10000000 /pdb:"$(BIN_DIR)\$(BASE_NAME).pdb" /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB:libcmt.lib /IGNORE:4086 /MLLVM:-exception-model=wineh /lldmap /OPT:REF
!IF "$(TARGET)" == "DEBUG"
DLINK_FLAGS = $(DLINK_FLAGS) /DEBUG:GHASH
!ELSEIF "$(TARGET)" == "RELEASE"
DLINK_FLAGS = $(DLINK_FLAGS)
!ENDIF

!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) /MACHINE:AMD64
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) /MACHINE:I386
!ENDIF

!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCToolsInstallDir%lib\x64" /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x64" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x64"
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCToolsInstallDir%lib\x86" /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x86" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x86"
!ENDIF

DLINK_FLAGS = $(DLINK_FLAGS) Kernel32.lib MSVCRTD.lib vcruntimed.lib ucrtd.lib Gdi32.lib User32.lib Winmm.lib Advapi32.lib ws2_32.lib

#
# LIBFUZZER
#
!ELSEIF "$(TOOLCHAIN)" == "LIBFUZZER"
CC = clang.exe

CC_OBJ_FLAG = -o
MBEDTLS_FLAGS = 
OPENSSL_FLAGS = -include Base.h -Wno-error=format -Wno-format
CMOCKA_FLAGS = -std=gnu99 -Wpedantic -Wall -Wshadow -Wmissing-prototypes -Wcast-align -Werror=address -Wstrict-prototypes -Werror=strict-prototypes -Wwrite-strings -Werror=write-strings -Werror-implicit-function-declaration -Wpointer-arith -Werror=pointer-arith -Wdeclaration-after-statement -Werror=declaration-after-statement -Wreturn-type -Werror=return-type -Wuninitialized -Werror=uninitialized -Werror=strict-overflow -Wstrict-overflow=2 -Wno-format-zero-length -Wmissing-field-initializers -Wformat-security -Werror=format-security -fno-common -Wformat -fno-common -fstack-protector-strong

CC_FLAGS = -c -g -fshort-wchar -fno-strict-aliasing -Wall  -Wno-array-bounds -ffunction-sections -fdata-sections -fno-common  -mno-red-zone -Wno-address -fno-asynchronous-unwind-tables -flto -DUSING_LTO -Wno-switch -funwind-tables -D_CRT_SECURE_NO_WARNINGS -DTEST_WITH_LIBFUZZER=TRUE -O1 -fsanitize=fuzzer,address
!IF "$(TARGET)" == "DEBUG"
CC_FLAGS = $(CC_FLAGS) -O0 -gcodeview
!ELSEIF "$(TARGET)" == "RELEASE"
CC_FLAGS = $(CC_FLAGS) -Oz
!ENDIF

!IF "$(ARCH)" == "X64"
CC_FLAGS = $(CC_FLAGS) -m64 -mcmodel=small
!ELSEIF "$(ARCH)" == "Ia32"
CC_FLAGS = $(CC_FLAGS) -m32 -march=i586
!ENDIF

SLINK = llvm-lib.exe

SLINK_OBJ_FLAG = /OUT:
SLINK_FLAGS = 

DLINK = lld-link.exe
DLINK_OBJECT_FILES = $(STATIC_LIBRARY_FILES)

DLINK_FLAGS = /out:"$(BIN_DIR)\$(BASE_NAME).exe" /base:0x10000000 /pdb:"$(BIN_DIR)\$(BASE_NAME).pdb" /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB:libcmt.lib /IGNORE:4086 /MLLVM:-exception-model=wineh /lldmap /OPT:REF
!IF "$(TARGET)" == "DEBUG"
DLINK_FLAGS = $(DLINK_FLAGS) /DEBUG:GHASH
!ELSEIF "$(TARGET)" == "RELEASE"
DLINK_FLAGS = $(DLINK_FLAGS)
!ENDIF

!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) /MACHINE:AMD64
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) /MACHINE:I386
!ENDIF

!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCToolsInstallDir%lib\x64" /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x64" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x64" /LIBPATH:"%LLVM_PATH%\lib\clang\9.0.0\lib\windows"
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCToolsInstallDir%lib\x86" /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x86" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x86" /LIBPATH:"%LLVMx86_PATH%\lib\clang\9.0.0\lib\windows"
!ENDIF

!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) Kernel32.lib MSVCRTD.lib vcruntimed.lib ucrtd.lib Gdi32.lib User32.lib Winmm.lib Advapi32.lib ws2_32.lib clang_rt.asan_dynamic-x86_64.lib clang_rt.asan_dynamic_runtime_thunk-x86_64.lib clang_rt.fuzzer-x86_64.lib
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) Kernel32.lib MSVCRTD.lib vcruntimed.lib ucrtd.lib Gdi32.lib User32.lib Winmm.lib Advapi32.lib ws2_32.lib clang_rt.asan_dynamic-i386.lib clang_rt.asan_dynamic_runtime_thunk-i386.lib clang_rt.fuzzer-i386.lib
!ENDIF
#
# Visual Studio
#
!ELSE

CC = cl.exe

CC_OBJ_FLAG = /Fo:
MBEDTLS_FLAGS = /wd4244 /wd4132 /wd4245 /wd4310 /wd4701 /wd4127
OPENSSL_FLAGS = /FIBase.h /wd4090 /wd4132 /wd4244 /wd4245 /wd4267 /wd4306 /wd4310 /wd4700 /wd4389 /wd4702 /wd4706 /wd4819
CMOCKA_FLAGS = /wd4204 /wd4133 /wd4267 /wd4701 /wd4702 /wd4703 /D _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1 /D _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT=1 /D _CRT_NONSTDC_NO_WARNINGS=1

CC_FLAGS = /nologo /c /WX /W4 /Gs32768 /D UNICODE /Gy /EHs-c- /GR- /GF /Z7 /Gw /Oy- /D_CRT_SECURE_NO_WARNINGS
CC_FLAGS = $(CC_FLAGS) /GS
!IF "$(TARGET)" == "DEBUG"
CC_FLAGS = $(CC_FLAGS) /Od
CC_FLAGS = $(CC_FLAGS) /RTCs
!ELSEIF "$(TARGET)" == "RELEASE"
CC_FLAGS = $(CC_FLAGS) /GL /O1b2s
!ENDIF

SLINK = lib.exe

SLINK_OBJ_FLAG = /OUT:
SLINK_FLAGS = /NOLOGO /LTCG

DLINK = link.exe
DLINK_OBJECT_FILES = $(STATIC_LIBRARY_FILES)

DLINK_FLAGS = /out:"$(BIN_DIR)\$(BASE_NAME).exe" /base:0x10000000 /pdb:"$(BIN_DIR)\$(BASE_NAME).pdb" /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB:libcmt.lib /IGNORE:4086 /MAP /OPT:REF
!IF "$(TARGET)" == "DEBUG"
DLINK_FLAGS = $(DLINK_FLAGS) /DEBUG
!ELSEIF "$(TARGET)" == "RELEASE"
DLINK_FLAGS = $(DLINK_FLAGS) /LTCG
!ENDIF

!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) /MACHINE:AMD64
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) /MACHINE:I386
!ENDIF

!IF "$(TOOLCHAIN)" == "VS2015"
!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCINSTALLDIR%Lib\AMD64" /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x64" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x64"
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCINSTALLDIR%Lib"       /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x86" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x86"
!ENDIF

!ELSEIF "$(TOOLCHAIN)" == "VS2019"
!IF "$(ARCH)" == "X64"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCToolsInstallDir%lib\x64" /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x64" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x64"
!ELSEIF "$(ARCH)" == "Ia32"
DLINK_FLAGS = $(DLINK_FLAGS) /LIBPATH:"%VCToolsInstallDir%lib\x86" /LIBPATH:"%UniversalCRTSdkDir%lib\%UCRTVersion%\ucrt\x86" /LIBPATH:"%WindowsSdkDir%lib\%WindowsSDKLibVersion%\um\x86"
!ENDIF
!ENDIF

DLINK_FLAGS = $(DLINK_FLAGS) Kernel32.lib MSVCRTD.lib vcruntimed.lib ucrtd.lib Gdi32.lib User32.lib Winmm.lib Advapi32.lib ws2_32.lib

!ENDIF
